Initially we are going through the pragrams that were practiced after scratch programming. 
With that in mind we are exploring the basic way how the source code we compile is converted to machine code, comupters could understand.
We named the file hello.c for easier compilation.

/*NO:1
//Hello world Program

#include <stdio.h>
#include <cs50.h>
int main (void)
{
    printf("Hello World\n");
}

With the command [clang hello.c] we are able to create a file a.out which is also able to give an output*/


/*
//NO:2
//Getting a string program.
#include <stdio.h>
#include <cs50.h>
int main (void)
{
    string name = get_string("What is your name?\n");
    printf("Hello %s, Do well. Congragulations!\n",name);
}
Its like a revision */



//Meow Program
#include <stdio.h>
#include <cs50.h>
void meow (void); //calling the function
int main (void)
#define times 3 //using the define function for the first time
{
    for (int i=0;i<times;i++)
    meow();
}
void meow (void)
{
    printf("meow\n");
}

Basically the steps involved are 
1. Preprocessing
2. Compiling
3. Assembly
4. Linking


The debugging :

    It is said that the term debugging came from the Harvard Mark 1 computer. There was a bug- a moth inside the computer that was sabotaging the computer's
operations. The person who built the computer found the moth and pasted the moth in his notebook leading to the origin of the word - debugging.
    One of the debuggers we are gonna use is debug50. In addition, we cannot use the printf statement very frequently. When used frequently, it may lead to errors.

    In this case we can use the debug50 ./debug and run. Some random things will happen and you will be able to see what the program does with the help of the step over at the top and 
pause option by the left - a red dot. By doing a step by step debugging we will be able to identify the error.

for example:

#include <cs50.h>
#include <stdio.h>

void print_height(int height);
int main(void)
{
    int h = get_int("Height : ");
    print_height(h);
}

void print_height(int height)
{
    for (int i = 0; i <= height; i++)
    {
        printf("#\n");
    }
}

/*
used to practice how to use the debugger
debug50 ./bug
mark the pause.
use stepover
use play
we can observe the path at the human pace.
*/



Memory Allocation

All the 0s and 1s with the respective addresses are stored in the computer's hardware.

> CLANG:
        Clang is a program that runs in the background. make command makes the source code to be processed in the background.
        > terminal command: clang -o hello hello.c  : Clang output hello while compiling hello.c
        > terminal command: clang -o hello hello.c -lcs50: when running a program directly with the Clang compiler, it doesn't know how to use the library. 
                                                             So, we have to specify the compiler to the library by mentioning it.

/*This is the first program in Arrays
we are to enter the scores of 3 subjects*/

/*

>> Printing average of scores: <<

#include <stdio.h>
#include <cs50.h>

int main (void)
{
    int score1 = 80;
    int score2 = 70;
    int score3 = 90;
//now let's try to print the average.
    printf("average: %i\n",(score1 + score2 + score3)/3);
}
*/
/*
>> Printing average of scores with float: <<

#include <stdio.h>
#include <cs50.h>

int main (void)
{
    int score1 = 80;
    int score2 = 70;
    int score3 = 90;
//  printf("average: %f\n",(score1 + score2 + score3)/3.0); //let's use float this time. As the
scores are int, it will show an error printf("average: %f\n",(score1 + score2 + score3)/(float)3.0);
//(is an alternate option). In order to overcome that we make 3 - 3.0
}
Instead of assigning data type for each and every score, what if we could just do it one and it will
generate that many number Arrays can be made use in this case

An array is a sequence of numbers back to back in memory.

SYNTAX : [data type] [name of the variable] [[no of occurance]];
        int score [3];

*/

/*
>> Indexing into the Array with specific loaction tags and same variable <<

#include <stdio.h>
#include <cs50.h>

int main (void)
{
    int score[3]; //array syntax
    score[0] = 80;
    score[1] = 70;
    score[2] = 90;
    printf("average: %f\n",(score[0]+score[1]+score[2])/3.0);
}
//Now there is only one variable. Instead of three.

*/

/*
//Lets optimze it even further with array concept

#include <cs50.h>
#include <stdio.h>

int main (void)
{
    int score [3];
    for (int i = 0; i < 3; i++)
    {
        score[i] = get_int("Score %i: ",i+1);
    }

    printf("average: %f\n",(score[0] + score[1] + score[2])/3.0);
}
//this code is optimised with for loop. however there is still the number 3 everywhere on the code.
//Optimising it even further will take us to :

// to get rid of the 3 we are going to use contant interger function.

#include <cs50.h>
#include <stdio.h>

int main (void)
{
    const int N = 3; //capitalization is done to show that this variable represents a constant
value. int score [N]; for (int i = 0; i < N; i++)
    {
        score[i] = get_int("Score %i: ",i+1);
    }

    printf("average: %f\n",(score[0] + score[1] + score[2])/ (float)N);
}
*/

/*
#include <cs50.h>
#include <stdio.h>
//declaring the constant int outside for convenience
const int N = 3;

//prototype
float average (int length, int array[]);

int main (void)
{
     //capitalization is done to show that this variable represents a constant value.
    int score [N];
    for (int i = 0; i < N; i++)
    {
        score[i] = get_int("Score %i: ",i+1);
    }

    printf("average: %f\n",average(N, score)); //[doubt] why N and score are mentioned?
    //[ans] average is a helper function. It takes 2 values. one is N cause it's got to know how
many numbers. two is the array itself.
}

float average (int length, int array[])
{
    int sum = 0;
    for (int i = 0; i < length; i++)
    {
        sum += array[i];
    }
    return (sum / (float)length);
}
*/
// Getting input from the user

/*
#include <cs50.h>
#include <stdio.h>
int average(int length, int array[]);

int main(void)
{
    int N = 0;
    int score[N];
    // getting the number of inputs from user
    N = get_int("No. of Scores: ");
    for (int i = 0; i < N; i++)
    {
        score[i] = get_int("score %i: ", i + 1);
    }
    printf("average: %i", average(N, score));
}

int average(int length, int array[])
{
    int sum = 0;                     // creating a variable sum
    for (int i = 0; i < length; i++) // iteration over lenth of that array
    {
        sum += array[i];
    }
    return sum / length;
}
The whole code encounters errors due to misplaced declarations.

Lets retry correcting the code:
*/

#include <cs50.h>
#include <stdio.h>
//prototype
float average (int length, int array[]);

int main (void)
{
    int N = get_int("No. of scores: ");
    int score[N];
    for(int i = 0; i < N; i++)
    {
        score[i] = get_int("Score %i: ",i+1);
    }
    printf("Average = %.3f\n", average (N,score));
}
float average (int len, int array[])
{
    int sum = 0;
    for (int i = 0; i<len; i++)
    {
        sum += array[i];
    }
    return (float)sum/len;
}

// Let's find the length of the string
//We are creating a program called "length.c"
/*
#include <stdio.h>
#include <cs50.h>
int main (void)
{
    string length = get_string("Name:");

    //initiating a integer to calculate the length
    int n = 0;
    while (length[n] != '\0')
    {
        n++;
    }
    printf("%i\n",n);
}
*/


//Let's calculate the string length with the help of a function
/*
#include <cs50.h>
#include<stdio.h>
//declare the fuction:
int string_length (string s);
int main (void)
{
    string name = get_string("Name: ");
    int length = string_length(name);
    printf("%i\n",length);
}
//the function
int string_length (string s)
{
    int n = 0;
    while (s[n] != '\0')
    {
        n++;
    }
    return n;
}
*/

/*
In the c programming there is a separate library for strings. Thus when strings are involved we can use the
Library : "string.h"
(Source for reference : manual.cs50.io)

So instead of using the 'string_length' function, we can use the function in the string.h library called
- "strlen"
*/

//The simplified code is as follows:
#include <cs50.h>
#include <stdio.h>
#include <string.h>

int main (void)
{
    string length = get_string("Name: ");
    int l = strlen(length);
    printf("Length : %i\n", l);
}
//Now the code is more simplified with the use of a library.

// let's just play around with the functions and learn even more:
/*
Before getting into the coding part, lets just know that in the ASCII keyboard format,
*/

#include <stdio.h>
#include <cs50.h>
#include <string.h>

int main (void)
{
    string s = get_string("Input: ");
    printf("Output: ");
    for (int i = 0; i < strlen(s); i++) //setting the rule for printing one by one character.
    {
        printf("%c",s[i]); //printing the character as per the array.
    }
    printf("\n"); //\n is used finally as not to break the line inbetween.
}
/*in this program we can see that the string length is always going to be the same in line 14, however we have used it*/



****************************************--> uppercase.c <--************************************************

// This code is intended to change the lowercase letters to upper case letters

/*
#include <cs50.h>
#include <stdio.h>
#include <string.h>

int main (void)
{
    string s = get_string("Before: ");
    printf("After:  ");
    //we are going to change if there are any lower case to upper case
    for (int i = 0, n = strlen(s); i < n; i++)
    {
        if (s[i] >= 'a'&& s[i] <= 'z') //in this condition we are including the lower case alphabets
        //if (s[i] >= 97 && s[i] = 122)
        {
            //change s[i] to upper case
            // else print s[i]
            printf("%c",s[i]-32);
        }
        else
        {
            printf("%c",s[i]);
        }
    }
    printf("\n");
}
*/

/* what if we use the letters itself from ASCII to denote the standard difference insteaf of using
 * -32 */

/*
#include <cs50.h>
#include <stdio.h>
#include <string.h>

int main (void)
{
    string s = get_string("Before: ");
    printf("After:  ");
    for (int i = 0, n = strlen(s); i < n; i++)
    {
        if (s[i] >= 'a'&& s[i] <= 'z')
        {
            printf("%c",s[i] - ('a'-'A')); //here we used the characters to denote the difference
        }
        else
        {
            printf("%c",s[i]);
        }
    }
    printf("\n");
}
// the program works fine
*/

// We are using the ctype.h library
/* Why are we using the ctype library?
    Answer: The ctype library has the function to change from upper case to lower case and lower
   case to upper case*/

/*
#include <cs50.h>
#include <ctype.h> //we are including the ctype library
#include <stdio.h>
#include <string.h>

int main(void)
{
    string s = get_string("Before: ");
    printf("After:  ");
    for (int i = 0, n = strlen(s); i < n; i++)
    {
        if (s[i] >= 'a' && s[i] <= 'z')
        {
            printf("%c", toupper(s[i])); // here we change the code from
            //printf("%c",s[i] - ('a'-'A'));
            //to
            //printf("%c", toupper(s[i]);j
        }
        else
        {
            printf("%c", s[i]);
        }
    }
    printf("\n");
}
*/




/*In the following code we can reduce the consditionals like else and if as the work of that conditional is done by the 'toupper'
function*/

#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
    string s = get_string("Before: ");
    printf("After:  ");
    for (int i = 0, n = strlen(s); i < n; i++)
    {
        printf("%c", toupper(s[i])); // here we change the code from
    }
    printf("\n");
}

//The code is now ever more simplified

*********************************************--> Using the arguments as input function: <--*****************************************

/*
Normally in the main function, there will be no input from the user. However if you want the input to the main function can be given as
argument input
Let's consider the arrays here

we normally use
    int main (void)

Let's now see how we use the input with the arguments
*/
/*
#include <stdio.h>
#include <cs50.h>

int main (void)
{
    string answer = get_string("What's your name?\n");
    printf("hello, %s\n",answer);
}
*/
//This is the old way of doing it. Now lets see the input with the CLI x with input arguments
/*
#include <stdio.h>
#include <cs50.h>

int main (int argc, string argv[]) //argument vector array
{
    printf("hello, %s\n", argv[0]);
}
*/
// Output: hello, ./greet
//even if we use the cli - ./greet Rosario, we get the same output
//so we will use the argv[1] instead of argv[0], because thats where the human exchange starts

/*
#include <stdio.h>
#include <cs50.h>

int main (int argc, string argv[])
{
    printf("hello, %s\n", argv[1]); //use the argv[1] instead of argv[0]
}
*/

// the program works good
// if we gforget to give a name, the output will be - hello, (null)

// Now let's give the condition if the name is given the program has to print, else it can print hello world
/*
#include <stdio.h>
#include <cs50.h>

int main (int argc, string argv[]) //argument Count
{
    if (argc == 2)
    {
        printf("hello, %s\n",argv[1]);
    }
    else
    {
        printf("hello, world!\n");
    }
}
*/
// using different variables to understand


#include <stdio.h>
#include <cs50.h>

int main (int a, string s[]) //argument Count
{
    if (a == 2)
    {
        printf("hello, %s\n",s[1]);
    }
    else
    {
        printf("hello, world!\n");
    }
}
//The program works fine


Fun with Command Line Interface

1. cowsay moo
    cowsay - command | moo - variable (Try - Hi how are you)
2. cowsay -f duck quack
3. cowsay -f dragon fire

******************************--> Command line - Error Notification <--******************************

In zoom, other webpages we see the error codes like 404. when files are not found, we see these errors. 

#include <stdio.h>
#include <cs50.h>

int main (int argc, string argv[])
{
    if (argc != 2)
    {
        printf("command line not found\n");
        return 1;
    }
    else
    {
        printf("Hello, %s\n",argv[1]);
        return 0;
    }
}

In this program we can use the command 
--> ./status [name] to print the string
--> ./status or ./status [2 or more names] to print the error code
--> echo $? to see the return value as 404 file not found.
